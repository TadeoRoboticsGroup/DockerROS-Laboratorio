# Imagen base de ROS2 Humble
FROM ros:humble

# Evitar interacciones durante la instalación
ENV DEBIAN_FRONTEND=noninteractive

# Instalar dependencias básicas primero
RUN apt-get update && apt-get install -y \
    curl wget git build-essential cmake nano \
    lsb-release gnupg2 \
    python3-pip python3-dev \
    usbutils libudev-dev \
    && rm -rf /var/lib/apt/lists/*

# Eliminar cualquier configuración previa de ROS-Industrial (no disponible para Jammy)
RUN rm -f /etc/apt/sources.list.d/ros-industrial.list || true

# Instalar paquetes ROS2 core
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-desktop \
    ros-humble-rviz2 \
    ros-humble-rqt* \
    && rm -rf /var/lib/apt/lists/*

# Instalar MoveIt y controladores
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-moveit \
    ros-humble-moveit-ros-planning \
    ros-humble-moveit-ros-move-group \
    ros-humble-moveit-ros-visualization \
    ros-humble-moveit-servo \
    ros-humble-joint-trajectory-controller \
    ros-humble-effort-controllers \
    ros-humble-position-controllers \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Instalar percepción 3D y SLAM
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-pcl-ros \
    ros-humble-pcl-conversions \
    ros-humble-perception-pcl \
    ros-humble-rtabmap-ros \
    ros-humble-octomap \
    ros-humble-octomap-ros \
    ros-humble-slam-toolbox \
    ros-humble-librealsense2 \
    ros-humble-realsense2-camera \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Instalar navegación
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-navigation2 \
    ros-humble-nav2-bringup \
    ros-humble-nav2-smac-planner \
    ros-humble-nav2-behavior-tree \
    ros-humble-behaviortree-cpp-v3 \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Instalar interfaces con robots específicos (sin industrial-msgs)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-ur-description \
    ros-humble-ur-msgs \
    ros-humble-franka-description \
    ros-humble-mavros \
    ros-humble-mavros-extras \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Instalar herramientas para sistemas multi-robot
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-fkie-multimaster \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Instalar comunicación serial y hardware
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-serial-driver \
    ros-humble-microxrcedds-agent \
    ros-humble-rosserial-arduino \
    ros-humble-rosserial-python \
    ros-humble-v4l2-camera \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Instalar visión y procesamiento de imágenes
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-cv-bridge \
    ros-humble-vision-opencv \
    ros-humble-image-transport \
    ros-humble-image-transport-plugins \
    ros-humble-compressed-image-transport \
    ros-humble-camera-info-manager \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Instalar simulación
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-gazebo-ros-pkgs \
    ros-humble-gazebo-ros \
    ros-humble-gazebo-plugins \
    ros-humble-webots-ros2 \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Instalar puente ROS1-ROS2 y dependencias X11
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-rosbridge-server \
    ros-humble-rosbridge-msgs \
    ros-humble-rosbridge-library \
    python-is-python3 \
    x11-apps \
    mesa-utils \
    libqt5x11extras5 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-keysyms1 \
    libxcb-randr0 \
    libxcb-render-util0 \
    libxcb-xinerama0 \
    libxcb-xkb1 \
    qtbase5-dev \
    libqt5gui5 \
    libegl1 \
    libgl1-mesa-dri \
    libgl1-mesa-glx \
    libglib2.0-0 \
    python3-tk \
    python3-colcon-common-extensions \
    python3-vcstool \
    || true \
    && rm -rf /var/lib/apt/lists/*

# Intentar instalar el puente ROS1-ROS2 si está disponible
RUN apt-get update && \
    apt-get install -y ros-humble-ros1-bridge || \
    echo "No se pudo instalar ros-humble-ros1-bridge, se usará rosbridge como alternativa"

# Instalar dependencias Python básicas
RUN pip3 install --no-cache-dir \
    transforms3d \
    numpy \
    matplotlib \
    PyQt5 \
    pyyaml \
    rospkg \
    empy \
    || true

# Instalar dependencias Python para visión y ML
RUN pip3 install --no-cache-dir \
    opencv-python \
    scikit-learn \
    scikit-image \
    pillow \
    || true

# Instalar frameworks de deep learning
RUN pip3 install --no-cache-dir \
    tensorflow \
    keras \
    torch \
    torchvision \
    || true

# Instalar paquetes para RL y comunicación
RUN pip3 install --no-cache-dir \
    pyserial \
    gym \
    stable-baselines3 \
    pydot \
    graphviz \
    xarray \
    optuna \
    plansys2-tools \
    nav2-simple-commander \
    || true

# Configurar acceso a puertos USB para Arduino, ESP, STM, etc.
RUN usermod -a -G dialout root && \
    mkdir -p /etc/udev/rules.d && \
    echo 'KERNEL=="ttyUSB[0-9]*",MODE="0666"' >> /etc/udev/rules.d/99-serial.rules && \
    echo 'KERNEL=="ttyACM[0-9]*",MODE="0666"' >> /etc/udev/rules.d/99-serial.rules

# Configurar variables de entorno
ENV QT_X11_NO_MITSHM=1
ENV LIBGL_ALWAYS_INDIRECT=0
ENV NO_AT_BRIDGE=1
ENV QT_ACCESSIBILITY=1

# Crear y configurar el espacio de trabajo ROS2
WORKDIR /ros2_ws
RUN mkdir -p /ros2_ws/src

# Descargar paquetes adicionales para robótica avanzada desde GitHub
WORKDIR /ros2_ws/src
RUN git clone -b humble https://github.com/ros-planning/moveit2_tutorials.git || true
RUN git clone -b ros2 https://github.com/IntelligentRoboticsLabs/gb_visual_detection_3d.git || true
RUN git clone https://github.com/ros-planning/moveit_task_constructor.git || true
RUN git clone https://github.com/PlanSys2/ros2_planning_system.git || true
RUN git clone -b humble https://github.com/IntelligentRoboticsLabs/ros2_planning_system_examples.git || true

# Instalar code-server (VS Code en el navegador)
WORKDIR /ros2_ws
RUN curl -fsSL https://code-server.dev/install.sh | sh || true

# Configurar el entorno ROS2
SHELL ["/bin/bash", "-c"]
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc && \
    echo "if [ -f /ros2_ws/install/setup.bash ]; then source /ros2_ws/install/setup.bash; fi" >> ~/.bashrc && \
    # Configuraciones adicionales para el puente ROS1-ROS2
    echo "export ROS_MASTER_URI=http://localhost:11311" >> ~/.bashrc && \
    echo "export ROS_HOSTNAME=localhost" >> ~/.bashrc && \
    echo "export RMW_IMPLEMENTATION=rmw_fastrtps_cpp" >> ~/.bashrc

# Script para iniciar el puente ROS1-ROS2
RUN echo '#!/bin/bash' > /start_bridge.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /start_bridge.sh && \
    echo 'if [ -f "/ros2_ws/install/setup.bash" ]; then' >> /start_bridge.sh && \
    echo '  source /ros2_ws/install/setup.bash' >> /start_bridge.sh && \
    echo 'fi' >> /start_bridge.sh && \
    echo 'ros2 run ros1_bridge dynamic_bridge || echo "ros1_bridge no disponible. Utiliza rosbridge como alternativa."' >> /start_bridge.sh && \
    chmod +x /start_bridge.sh

# Crear script para monitorear puertos seriales
RUN echo '#!/bin/bash' > /monitor_serial.sh && \
    echo 'echo "Puertos seriales disponibles:"' >> /monitor_serial.sh && \
    echo 'ls -l /dev/ttyUSB* /dev/ttyACM* 2>/dev/null || echo "No hay dispositivos conectados"' >> /monitor_serial.sh && \
    chmod +x /monitor_serial.sh

# Script de punto de entrada
RUN echo '#!/bin/bash' > /ros_entrypoint.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /ros_entrypoint.sh && \
    echo 'cd /ros2_ws' >> /ros_entrypoint.sh && \
    echo 'if [ -f "/ros2_ws/install/setup.bash" ]; then' >> /ros_entrypoint.sh && \
    echo '  source /ros2_ws/install/setup.bash' >> /ros_entrypoint.sh && \
    echo 'fi' >> /ros_entrypoint.sh && \
    echo 'exec "$@"' >> /ros_entrypoint.sh && \
    chmod +x /ros_entrypoint.sh

# Punto de entrada
ENTRYPOINT ["/ros_entrypoint.sh"]

# Comando por defecto
CMD ["bash"]